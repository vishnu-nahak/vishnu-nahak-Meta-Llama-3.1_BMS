# Book Management System

Welcome to the **Book Management System**! This project provides a RESTful API for managing books and their reviews, along with a summarization feature using Hugging Face models. This API allows users to perform CRUD operations on books and reviews, making it a powerful tool for book management.

## Table of Contents

- Features
- Technologies Used
- Prerequisites
- Getting Started
  - Clone the Repository
  - Create a Virtual Environment
  - Install Dependencies
  - Set Up Environment Variables
  - Set Up the Database
  - Run the Application
  - Access the API Documentation
- Usage
- Endpoints
- Contributing
- License
- Acknowledgments

## Features

- **CRUD Operations**: Create, read, update, and delete books and their reviews.
- **Summary Generation**: Generate summaries for books using the Hugging Face Llama model.
- **CORS Support**: Easily integrate with frontend applications.

## Technologies Used

- **FastAPI**: A modern web framework for building APIs with Python.
- **SQLAlchemy**: An ORM for database interactions.
- **PostgreSQL**: The database used for storing book and review data.
- **Hugging Face Transformers**: For generating summaries.
- **Pydantic**: Data validation and settings management using Python type annotations.
- **dotenv**: To load environment variables from a `.env` file.

## Prerequisites

Ensure you have the following installed on your machine:

- Python 3.7 or higher
- PostgreSQL (for the database)
- pip (Python package manager)

## Getting Started

Follow these steps to set up and run the project locally:

### 1. Clone the Repository

First, clone the repository to your local machine:

```bash
git https://github.com/vishnu-nahak/vishnu-nahak-Meta-Llama-3.1_BMS.git

### 2. Create a Virtual Environment
It's recommended to use a virtual environment to manage dependencies. Run the following command:
python -m venv venv
source venv/bin/activate  # On Windows use `venv\Scripts\activate`

### 3. Install Dependencies
Install the required packages using pip:
pip install -r requirements.txt

### 4. Set Up Environment Variables
Create a .env file in the root of the project and add the following variables:
DATABASE_URL=postgresql+asyncpg://username:password@localhost:5432/DBname
HUGGINGFACE_TOKEN=your_huggingface_token

Replace username, password, and your_huggingface_token with your PostgreSQL credentials and Hugging Face API token.

### 5. Set Up the Database
Make sure your PostgreSQL server is running. You may need to create the database using the following SQL command:
CREATE DATABASE DBname;

### 6. Run the Application
Start the FastAPI application using Uvicorn:
uvicorn app.main:app --reload

The API will be accessible at http://127.0.0.1:8000

### 7. Access the API Documentation
You can explore the API documentation automatically generated by FastAPI at:

Swagger UI: http://127.0.0.1:8000/docs
ReDoc: http://127.0.0.1:8000/redoc
Usage
You can interact with the API using tools like Postman or curl. Below are some example endpoints you can use:

Endpoints
Create a Book:

Method: POST
Endpoint: /books/
Body:
{
  "title": "Book Title",
  "author": "Author Name",
  "genre": "Genre",
  "year_published": 2023,
  "summary": "Book summary here."
}


Get All Books:

Method: GET
Endpoint: /books/
Get a Specific Book:

Method: GET
Endpoint: /books/{book_id}
Update a Book:

Method: PUT
Endpoint: /books/{book_id}
Body (only include fields you want to update):
{
  "title": "Updated Title",
  "summary": "Updated summary here."
}

Delete a Book:

Method: DELETE
Endpoint: /books/{book_id}
Create a Review:

Method: POST
Endpoint: /books/{book_id}/reviews
Body:
{
  "review_text": "This book was great!",
  "rating": 5
}


Get Reviews for a Book:

Method: GET
Endpoint: /books/{book_id}/reviews
Generate Summary:

Method: POST
Endpoint: /generate-summary/
Body:
{
  "content": "Content to summarize."
}


Contributing
Contributions are welcome! If you have suggestions for improvements or bug fixes, please feel free to submit a pull request or open an issue.

